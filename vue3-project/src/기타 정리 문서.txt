* Composition API
  * Reactivity: Utilities
    * isRef() > https://vuejs.org/api/reactivity-utilities.html#isref 
      [설명]
        ref() 객체인지 여부를 판단한다.
    * unref() > https://vuejs.org/api/reactivity-utilities.html#unref
      [설명]
        인자 값이 ref() 객체라면 ref() 객체의 value를 반환하고 ref() 객체가 아니라면 인자 값을 반환한다.
        ☆ unref()는 함수의 인자로 두 가지 타입으로 받고 함수 내부에서 순수한 값을 사용할 때 유용하다.
    * toRef() > https://vuejs.org/api/reactivity-utilities.html#toref
      [설명]
        reactive() 객체의 일부 property를 추출하여 ref() 객체를 만든다.
        reactive() 객체의 일부 property의 값 변경과 추출한 ref() 객체의 value 값 변경은 양방향으로 동기화된다.
        ☆ toRef()는 component의 prop을 ref() 객체로 만들어 composable function의 인자로 보낼 때 유용하다.
    * toRefs() > https://vuejs.org/api/reactivity-utilities.html#toref
      [설명]
        reactive() 객체의 모든 property를 추출하여 ref() 객체를 만들고 object에 담아서 반환한다.
        reactive() 객체의 모든 property의 값 변경과 각각 추출한 ref() 객체의 value 값 변경은 양방향으로 동기화된다.
        ☆ toRefs()는 composable function의 반환 값이 reactive() 객체를 destructure/spread를 사용하여 받을 때,
          반응성을 잃지 않고 받을 수 있다.
    * isProxy() > https://vuejs.org/api/reactivity-utilities.html#isproxy
      [설명]
        reactive(), readonly(), shallowReactive() or shallowReadonly()로부터 생성된 proxy인지 판단한다.
    * isReactive() > https://vuejs.org/api/reactivity-utilities.html#isreactive
      [설명]
        reactive() or shallowReactive()로부터 생성된 proxy인지 판단한다.
    * isReadonly() > https://vuejs.org/api/reactivity-utilities.html#isreadonly
      readonly() or shallowReadonly()로부터 생성된 proxy인지 판단한다.
#######################################################################################################
#######################################################################################################
#######################################################################################################
  * Reactivity: Advanced
    * shallowRef() > https://vuejs.org/api/reactivity-advanced.html#shallowref
      [설명]
        object의 property value 변화에 대해서 감지하지 않는다.
        ☆ shallowRef()는 대용량 데이터를 조작하거나 여러 반응성 데이터를 통합할 때 사용한다.
    * triggerRef() > https://vuejs.org/api/reactivity-advanced.html#triggerref
      [설명]
        shallowRef() 객체에 변화가 있음을 알리기 위해 trigger 이벤트를 발생시킨다.
    * customRef() > https://vuejs.org/api/reactivity-advanced.html#customref
      [설명]
        데이터의 변화에 대한 get()의 dependency tracking, set()의 updates triggering을 개발자가 직접 정의할 수 있다.
    * shallowReactive() > https://vuejs.org/api/reactivity-advanced.html#shallowreactive
      [설명]
        object의 root 수준의 property value 변화 대해서만 감지하고 깊은 수준의 변화는 감지하지 않는다.
    * shallowReadonly() > https://vuejs.org/api/reactivity-advanced.html#shallowreadonly
      [설명]
        object의 root 수준의 property value 변화는 불가능하지만 깊은 수준의 변화는 가능하다.
    * toRaw() > https://vuejs.org/api/reactivity-advanced.html#toraw
      [설명]
        reactive(), readonly(), shallowReactive() or shallowReadonly() 객체를 원래의 object로 변환한다.
        ☆ toRaw()는 위 객체의 데이터 접근 이벤트(tracking), 변화 이벤트(triggering)가 발생되지 않기 위해 사용한다.
        ※ ???? It is not recommended to hold a persistent reference to the original object
    * markRaw() > https://vuejs.org/api/reactivity-advanced.html#toraw
      [설명]
        object가 proxy 객체로 변환되는 것을 방지하기 위해 마킹해둔다.
        ※ ???? Use with Caution
    * effectScope() > https://vuejs.org/api/reactivity-advanced.html#effectscope
      [설명]
        Composition API의 setup(), <script setup>에서 데이터의 반응성을 감지하기 위한 방법(computed, watch, watchEffect)을
        일반 함수에서도 사용할 수 있게 해준다.
    * getCurrentScope() > https://vuejs.org/api/reactivity-advanced.html#getcurrentscope
      [설명]
        현재 활성화되어 있는 effectScope() 객체를 반환한다.
    * onScopeDispose() > https://vuejs.org/api/reactivity-advanced.html#onscopedispose
      [설명]
        현재 활성화되어 있는 effectScope() 객체가 dispose될 때 callback 함수를 등록하여 수신한다.
        ☆ onScopeDispose()는 재사용이 가능한 composition function(i.e. effectScope(reusableCompositionFunction))에서
          onUnmounted와 같은 역할을 한다.
#######################################################################################################
#######################################################################################################
#######################################################################################################
* Options API
  * Component Instance
    